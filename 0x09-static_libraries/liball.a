!<arch>
0-isupper.c/    0           0     0     644     216       `
#include "main.h"

/**
 * _isupper - checks for uppercase character.
 * @c: letters
 * Return: (1) if uppercase otherwise (0).
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _memset - fill a block of memory with a specific value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     416       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int _string1;
	int _string2;

	_string1 = 0;
	while (dest[_string1] != '\0')
	{
		_string1++;
	}
	_string2 = 0;
	while (src[_string2] != '\0')
	{
		dest[_string1] = src[_string2];
		_string1++;
		_string2++;
	}
	dest[_string1] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     586       `
#include "main.h"
/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;
	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}
	if (f == 0)
		return (0);
	return (n);
}
1-isdigit.c/    0           0     0     644     218       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: parameter.
 * Return: (1) if digit otherwise (0).
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     360       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: memory where is stored
 * @src: memory where is copied
 * @n: number of bytes
 * Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int a;
	int b = n;

	for (a = 0; a < b; a++)
	{
		dest[a] = src[a];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     511       `
#include "main.h"
/**
 * _strncat - a function that concatenates two strings,
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int _string1;
	int _string2;

	_string1 = 0;
	while (dest[_string1] != '\0')
	{
		_string1++;
	}
	_string2 = 0;
	while (_string2 < n && src[_string2] != '\0')
	{
		dest[_string1] = src[_string2];
		_string1++;
		_string2++;
	}
	dest[_string1] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     238       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int a;

	for (a = 0; s[a] >= '\0'; a++)
	{
		if (s[a] == c)
			return (&s[a]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     215       `
#include "main.h"

/**
 * _strlen - a function returns the length of a string
 * @s: string
 * Return: length
 */

int _strlen(char *s)
{
	int lgth = 0;

	while (*s != '\0')
	{
		lgth++;
		s++;
	}
	return (lgth);
}

2-strncpy.c/    0           0     0     644     379       `
#include "main.h"
/**
 * _strncpy - a function that copies a string,
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a;

	a = 0;
	while (a < n && src[a] != '\0')
	{
		dest[a] = src[a];
		a++;
	}
	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     298       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * and outputs with _putchar.
 * @c: alphabets
 * Return: (1) if lower else (0) .
 */
int _islower(int c)
{
	char i;
	int checker = 0;

	for (i = 'a'; i <= 'z'; i++)
	{
		if (i == c)
		{
			checker = 1;
		}
	}
	return (checker);
}
3-puts.c/       0           0     0     644     218       `
#include "main.h"
/**
 * _puts - a function prints a string, followed
 * by a new line, to stdout
 * @str: string to print
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     313       `
#include "main.h"
/**
 * _strcmp - a function compare string values
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int a;

	a = 0;
	while (s1[a] != '\0' && s2[a] != '\0')
	{
		if (s1[a] != s2[a])
		{
			return (s1[a] - s2[a]);
		}
		a++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     415       `
#include "main.h"
/**
 * _strspn - function that gets the length
 * of a prefix substring.
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int a;

	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (*s == accept[a])
			{
				n++;
				break;
			}
			else if (accept[a + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     247       `
#include "main.h"
/**
 * _isalpha -  checks for alphabetic character.
 * @c: character.
 * Return: (1) if c is a letter, lowercase or uppercase otherwise (0).
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     335       `
#include "main.h"
/**
 * _strpbrk - a function that searches a
 * string for any of a set of bytes.
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int a;

	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (*s == accept[a])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     390       `
#include "main.h"
/**
 * _strstr - a function that locates a substring.
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     179       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer.
 * @n: checkers.
 * Return: int.
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}

9-strcpy.c/     0           0     0     644     343       `
#include "main.h"
/**
 * char *_strcpy - a function that copies the
 * string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int a = 0;
	int b = 0;

	while (*(src + a) != '\0')
	{
		a++;
	}
	for ( ; b < a ; b++)
	{
		dest[b] = src[b];
	}
	dest[a] = '\0';
	return (dest);
}

main.c/         0           0     0     644     212       `
#include "main.h"

/**
 * main - Entry point of the program.
 *
 * Return: int (0).
 */

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

